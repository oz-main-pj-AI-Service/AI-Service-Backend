version: '3.8'

services:
  django:
    build: .
    container_name: django
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DOCKER_ENV=true
    depends_on:
      redis:
        condition: service_healthy  # Redis가 실행될 때까지 대기
    volumes:
      - .:/Main-pj-AI-Service  # 프로젝트 루트 전체를 마운트
      - static_volume:/Main-pj-AI-Service/app/static
    working_dir: /Main-pj-AI-Service/app  # 컨테이너 내부 작업 디렉토리를 /Main-pj-AI-Service/app 으로 설정
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --workers 4 --bind 0.0.0.0:8000 config.wsgi:application"
    networks:
      - backend

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"  # Nginx가 80포트에서 요청 수신
    depends_on:
      - django
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/usr/share/nginx/html/static
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  static_volume: