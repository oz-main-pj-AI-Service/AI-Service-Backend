name: Code Quality Checks

on:
  push:
    branches:
      - "*"
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Remove docker-compose.override.yml (if exists)
        run: |
          rm -f docker-compose.override.yml

      - name: Set up Docker BuildKit (for faster builds)
        run: |
          export DOCKER_BUILDKIT=1

      - name: Create .env file  # ✅ .env 파일을 생성하는 단계 추가
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DOCKER_ENV=true" >> .env

      - name: Start Docker containers
        run: |
          docker-compose up -d

      - name: Check running containers
        run: docker ps -a

      - name: Wait for Redis to be ready
        run: |
          until docker exec django redis-cli -h redis ping | grep PONG; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Debug environment variables  # ✅ 컨테이너 내부 환경 변수 확인
        run: |
          docker exec django printenv | grep DOCKER_ENV
          docker exec django printenv | grep DB_HOST
          docker exec django printenv | grep DB_NAME

      - name: Run isort (Import sorting)
        run: |
          docker exec django poetry run isort . --check --diff

      - name: Run black (Code formatting)
        run: |
          docker exec django poetry run black . --check

      - name: Run Django Tests
        run: |
          docker exec django poetry run python manage.py test